name: worktime

on:
  pull_request:
    branches: master
    types: [opened, synchronize]

jobs:
  worktime:
    runs-on: ubuntu-latest
    env:
      REPO: https://${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}

      - name: get-worknum
        id: get-worknum
        run: echo "::set-env name=WORK_NUM::${HEAD_REF#feature/}"
        env:
          HEAD_REF: ${{ github.event.pull_request.head.ref }}

      - name: get-measurement
        id: get-measurement
        run: |
          set -o pipefail
          work_time=$(curl -s https://api.github.com/repos/${{github.repository}}/commits?sha=${{github.ref}} \
            | jq '[.[].commit.author.date] | .[0,-1] |= fromdate | .[0] - .[-1]' \
            | awk '{printf "%02d時間%02d分%02d秒\n", $1 / 3600, ($1 % 3600) / 60, $1 % 60}' \
            || echo "計測に失敗しました")
          echo "::set-env name=WORK_TIME::${work_time}"
          [[ "${WORK_TIME}" != "計測に失敗しました" ]]
          echo ::set-output name=exit_code::$?
        shell: bash

      - name: update-file
        id: update-file
        if: steps.get-measurement.outputs.exit_code == 0
        run: |
          filename="src/main/java/${WORK_NUM,,}/${WORK_NUM^^}.java"
          if [ -f "${filename}" ]; then
            sed -i -r "s/(\/\/ 完成までの時間:).*/\1 ${WORK_TIME}/g" ${filename}
            git config --global user.email "workflow@example.com"
            git config --global user.name "workflow user"
            git add ${filename}
            git commit -m '完成時間の記載' && git push ${REPO} HEAD:${{github.event.pull_request.head.ref}}
          else
            false
          fi
          echo ::set-output name=exit_code::$?
        shell: bash

      - name: comment for feilure
        if: steps.update-file.outputs.exit_code != 0 || steps.get-measurement.outputs.exit_code != 0
        run: |
          curl -X POST ${{ github.event.pull_request.comments_url }} \
            -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -H 'content-type: application/json' \
            -d "{\"body\": \"作業時間は${WORK_TIME}\nファイルの更新はしていないので、記載すること\n -[ ] 作業時間の記載\"}"
        shell: bash

      - name: comment for success
        if: steps.update-file.outputs.exit_code == 0
        run: |
          curl -X POST ${{ github.event.pull_request.comments_url }} \
            -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -H 'content-type: application/json' \
            -d "{\"body\": \"作業時間は${WORK_TIME}\n休憩時間が含まれている場合は修正すること\n - [ ] 作業時間の確認\"}"
        shell: bash